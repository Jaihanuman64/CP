
class DisjointSet{
    vector<int>rank,parent;
    public:
        DisjointSet(int n){
            rank.resize(n+1,0); // resize the vector & initialise 0 . n+1 cause 1 base index.
            parent.resize(n+1);
            for(int i = 0;i<=n;i++){ // i <= n cause 1 base indexing
                parent[i] = i; // make same element as parent for everyone.
            }
        }
 
        int findParent(int node){
            if(node == parent[node]){ // this satisfy when findParent(topmost parent) call
                return node;
            }
 
            return parent[node] = findParent(parent[node]); // this populate with the most parent node
        }
 
        void unionByRank(int u,int v){
            int ult_parent_for_u = findParent(u);  // get both nodes ultimate parents
            int ult_parent_for_v = findParent(v);
 
            if(ult_parent_for_u == ult_parent_for_v)
                return; // there is an cycle
           
            if(rank[ult_parent_for_u] < rank[ult_parent_for_v]){
                parent[ult_parent_for_u] = ult_parent_for_v; // make v as parent cause u rank is smaller
            }else if(rank[ult_parent_for_u] > rank[ult_parent_for_v]){
                parent[ult_parent_for_v] = ult_parent_for_u; // make u as parent cause v rank is smaller
            }else{
                parent[ult_parent_for_v] = ult_parent_for_u; // u can make anyone as parent.
                rank[ult_parent_for_u]++; // increase the rank of u . as before that their rank will same but after v inserting to u . u rank is getting higher (add one more step)
            }
        }
};


class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    /*int spanningTree(int V, vector<vector<int>> adj[])
    {
        // if they want mst then we need one more int for parent {wt,node,parent}
        // wt,node
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        vector<int>vis(V,0);
        int sum = 0;
        
        pq.push({0,0});
        
        while(!pq.empty()){
            auto it = pq.top();
            int wt = it.first;
            int node = it.second;
            pq.pop();
            
            if(vis[node] ==1)
                continue;
            vis[node] = 1; // only make node visited here 
            sum += wt;
            // if want mst here u can push to the mst vector
            
            for(auto elem:adj[node]){
                int adjNode = elem[0];
                int weight = elem[1];
                
                if(!vis[adjNode]){ // no mark for vis[]
                    pq.push({weight,adjNode});
                }
            }
        }
        
        return sum;
        
    }*/
    
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // {wt,{node,adjNode}}
        vector<pair<int,pair<int,int>>>edges; // store edges cause in future we need to sort the edges
        
        for(int i = 0;i<V;i++){
            for(auto it:adj[i]){
                int adjNode = it[0];
                int wt = it[1];
                int node = i;
                
                edges.push_back({wt,{node,adjNode}}); // store all the edge weight
            }
        }
        
        sort(edges.begin(),edges.end());
        int mstWt = 0;
        DisjointSet ds(V);
        
        for(auto it:edges){
            int wt = it.first;
            int u = it.second.first;
            int v = it.second.second;
            
            // check if both node are not in same set
            if(ds.findParent(u) != ds.findParent(v)){
                mstWt += wt;
                ds.unionByRank(u,v); // as they are in diffenent set we union.
            }
        }
        
        return mstWt;
        
    }
};
