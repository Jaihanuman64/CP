class Solution {
public:
    void dfs(vector<vector < int>> &graph, int s, int v, vector< bool > &visited)
		{
			visited[s] = true;
			vector<int> adj;
			for (int i = 0; i < v; i++)
			{
				int x = graph[s][i];
				if (x == 1)
				{
					adj.push_back(i);
				}
			}

			for (auto x: adj)
			{
				if (visited[x] == false)
				{
					dfs(graph, x, v, visited);
				}
			}
		}

	int findCircleNum(vector<vector < int>> &isConnected)
	{
		int v = isConnected.size();
		int c = 0;

		vector<bool> visited(v + 1, false);

		for (int i = 0; i < v; i++)
		{
			if (visited[i] == false)
			{
				c++;
				dfs(isConnected, i, v, visited);

			}
		}

		return c;

	}
};
