class Solution {
public:
    void dfs(vector<int>graph[],int si ,int ei,vector<bool>&vis,int &cnt){
        if(si==ei){
            cnt=1;
            return;
        }
        vis[si]=true;
        
        for(int i=0;i<graph[si].size();i++){
            
            if(!vis[graph[si][i]]){

              dfs(graph,graph[si][i],ei,vis,cnt);

            }
        }
    }
    bool validPath(int n, vector<vector<int>>& edges, int si, int ei) {
        vector<int>graph[n];
        for(int i=0;i<edges.size();i++){  
            graph[edges[i][0]].push_back(edges[i][1]);
            graph[edges[i][1]].push_back(edges[i][0]);
        }
        int cnt=0;vector<bool>vis(n,0);
        dfs(graph,si,ei,vis,cnt);
        if(cnt)return true;
        return false;
    }
};
